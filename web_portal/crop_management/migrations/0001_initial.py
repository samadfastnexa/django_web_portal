# Generated by Django 5.2.4 on 2025-09-09 07:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("farm", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Crop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Crop Name"
                    ),
                ),
                (
                    "scientific_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Scientific Name"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("cereal", "Cereal"),
                            ("vegetable", "Vegetable"),
                            ("fruit", "Fruit"),
                            ("legume", "Legume"),
                            ("oilseed", "Oilseed"),
                            ("fiber", "Fiber"),
                            ("spice", "Spice"),
                            ("medicinal", "Medicinal"),
                            ("fodder", "Fodder"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Category",
                    ),
                ),
                (
                    "growth_season",
                    models.CharField(
                        choices=[
                            ("kharif", "Kharif (Summer)"),
                            ("rabi", "Rabi (Winter)"),
                            ("zaid", "Zaid (Spring)"),
                            ("perennial", "Perennial"),
                        ],
                        max_length=20,
                        verbose_name="Growth Season",
                    ),
                ),
                (
                    "growth_cycle_days",
                    models.PositiveIntegerField(
                        help_text="Number of days from planting to harvest",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                        verbose_name="Growth Cycle (Days)",
                    ),
                ),
                (
                    "market_availability",
                    models.TextField(blank=True, verbose_name="Market Availability"),
                ),
                (
                    "economic_importance",
                    models.TextField(blank=True, verbose_name="Economic Importance"),
                ),
                (
                    "water_requirement",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Water Requirement",
                    ),
                ),
                (
                    "soil_type_preference",
                    models.TextField(blank=True, verbose_name="Soil Type Preference"),
                ),
                (
                    "climate_requirement",
                    models.TextField(blank=True, verbose_name="Climate Requirement"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "nutritional_value",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Nutritional Value"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_crops",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Crop",
                "verbose_name_plural": "Crops",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CropVariety",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Variety Name")),
                (
                    "variety_code",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Variety Code"
                    ),
                ),
                (
                    "yield_potential",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Expected yield per hectare (kg/ha)",
                        max_digits=8,
                        null=True,
                        verbose_name="Yield Potential (kg/ha)",
                    ),
                ),
                (
                    "maturity_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Days to maturity from planting",
                        null=True,
                        verbose_name="Maturity Days",
                    ),
                ),
                (
                    "disease_resistance",
                    models.TextField(blank=True, verbose_name="Disease Resistance"),
                ),
                (
                    "pest_resistance",
                    models.TextField(blank=True, verbose_name="Pest Resistance"),
                ),
                (
                    "quality_attributes",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Quality Attributes"
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(blank=True, verbose_name="Special Requirements"),
                ),
                (
                    "recommended_regions",
                    models.TextField(blank=True, verbose_name="Recommended Regions"),
                ),
                (
                    "seed_availability",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("limited", "Limited"),
                            ("unavailable", "Unavailable"),
                        ],
                        default="available",
                        max_length=20,
                        verbose_name="Seed Availability",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "developed_by",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Developed By"
                    ),
                ),
                (
                    "release_year",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Release Year"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="varieties",
                        to="crop_management.crop",
                    ),
                ),
            ],
            options={
                "verbose_name": "Crop Variety",
                "verbose_name_plural": "Crop Varieties",
                "ordering": ["crop__name", "name"],
                "unique_together": {("crop", "name")},
            },
        ),
        migrations.CreateModel(
            name="CropResearch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=300, verbose_name="Research Title"),
                ),
                (
                    "research_type",
                    models.CharField(
                        choices=[
                            ("yield_improvement", "Yield Improvement"),
                            ("disease_resistance", "Disease Resistance"),
                            ("pest_management", "Pest Management"),
                            ("quality_enhancement", "Quality Enhancement"),
                            ("climate_adaptation", "Climate Adaptation"),
                            ("nutrition_study", "Nutrition Study"),
                            ("market_analysis", "Market Analysis"),
                            ("sustainability", "Sustainability"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                        verbose_name="Research Type",
                    ),
                ),
                ("objective", models.TextField(verbose_name="Research Objective")),
                ("methodology", models.TextField(verbose_name="Methodology")),
                ("findings", models.TextField(verbose_name="Key Findings")),
                ("conclusions", models.TextField(verbose_name="Conclusions")),
                (
                    "research_institution",
                    models.CharField(
                        max_length=200, verbose_name="Research Institution"
                    ),
                ),
                (
                    "principal_investigator",
                    models.CharField(
                        max_length=100, verbose_name="Principal Investigator"
                    ),
                ),
                (
                    "research_period_start",
                    models.DateField(verbose_name="Research Start Date"),
                ),
                (
                    "research_period_end",
                    models.DateField(
                        blank=True, null=True, verbose_name="Research End Date"
                    ),
                ),
                (
                    "publication_status",
                    models.CharField(
                        choices=[
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("published", "Published"),
                            ("peer_reviewed", "Peer Reviewed"),
                        ],
                        default="ongoing",
                        max_length=20,
                        verbose_name="Publication Status",
                    ),
                ),
                (
                    "publication_reference",
                    models.TextField(blank=True, verbose_name="Publication Reference"),
                ),
                (
                    "doi",
                    models.CharField(blank=True, max_length=100, verbose_name="DOI"),
                ),
                (
                    "practical_applications",
                    models.TextField(blank=True, verbose_name="Practical Applications"),
                ),
                (
                    "impact_assessment",
                    models.TextField(blank=True, verbose_name="Impact Assessment"),
                ),
                (
                    "research_document",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="crop_research/",
                        verbose_name="Research Document",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="added_research",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="research_data",
                        to="crop_management.crop",
                    ),
                ),
                (
                    "variety",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="research_data",
                        to="crop_management.cropvariety",
                    ),
                ),
            ],
            options={
                "verbose_name": "Crop Research",
                "verbose_name_plural": "Crop Research",
                "ordering": ["-research_period_start", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FarmingPractice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="Practice Title"),
                ),
                (
                    "practice_type",
                    models.CharField(
                        choices=[
                            ("soil_preparation", "Soil Preparation"),
                            ("planting", "Planting"),
                            ("irrigation", "Irrigation"),
                            ("fertilization", "Fertilization"),
                            ("pest_control", "Pest Control"),
                            ("disease_management", "Disease Management"),
                            ("weed_control", "Weed Control"),
                            ("harvesting", "Harvesting"),
                            ("post_harvest", "Post Harvest"),
                            ("general", "General"),
                        ],
                        max_length=30,
                        verbose_name="Practice Type",
                    ),
                ),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "implementation_steps",
                    models.TextField(verbose_name="Implementation Steps"),
                ),
                (
                    "timing_description",
                    models.TextField(blank=True, verbose_name="Timing Description"),
                ),
                (
                    "days_after_planting",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Days after planting when this practice should be applied",
                        null=True,
                        verbose_name="Days After Planting",
                    ),
                ),
                (
                    "required_materials",
                    models.TextField(blank=True, verbose_name="Required Materials"),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Estimated Cost",
                    ),
                ),
                (
                    "labor_requirement",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="Labor Requirement",
                    ),
                ),
                (
                    "expected_impact",
                    models.TextField(blank=True, verbose_name="Expected Impact"),
                ),
                (
                    "success_indicators",
                    models.TextField(blank=True, verbose_name="Success Indicators"),
                ),
                (
                    "applicable_regions",
                    models.TextField(blank=True, verbose_name="Applicable Regions"),
                ),
                (
                    "climate_suitability",
                    models.TextField(blank=True, verbose_name="Climate Suitability"),
                ),
                (
                    "research_source",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Research Source"
                    ),
                ),
                (
                    "validation_status",
                    models.CharField(
                        choices=[
                            ("experimental", "Experimental"),
                            ("tested", "Field Tested"),
                            ("proven", "Proven"),
                            ("recommended", "Recommended"),
                        ],
                        default="experimental",
                        max_length=20,
                        verbose_name="Validation Status",
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Priority Level",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_practices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farming_practices",
                        to="crop_management.crop",
                    ),
                ),
                (
                    "variety",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="farming_practices",
                        to="crop_management.cropvariety",
                    ),
                ),
            ],
            options={
                "verbose_name": "Farming Practice",
                "verbose_name_plural": "Farming Practices",
                "ordering": ["crop__name", "practice_type", "priority_level"],
            },
        ),
        migrations.CreateModel(
            name="YieldData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "harvest_year",
                    models.PositiveIntegerField(verbose_name="Harvest Year"),
                ),
                (
                    "harvest_season",
                    models.CharField(
                        choices=[
                            ("kharif", "Kharif (Summer)"),
                            ("rabi", "Rabi (Winter)"),
                            ("zaid", "Zaid (Spring)"),
                            ("perennial", "Perennial"),
                        ],
                        max_length=20,
                        verbose_name="Harvest Season",
                    ),
                ),
                (
                    "area_cultivated",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Area cultivated in hectares",
                        max_digits=10,
                        verbose_name="Area Cultivated (ha)",
                    ),
                ),
                (
                    "total_yield",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total yield in kilograms",
                        max_digits=12,
                        verbose_name="Total Yield (kg)",
                    ),
                ),
                (
                    "yield_per_hectare",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Calculated yield per hectare",
                        max_digits=10,
                        verbose_name="Yield per Hectare (kg/ha)",
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        blank=True,
                        choices=[("A", "Grade A"), ("B", "Grade B"), ("C", "Grade C")],
                        max_length=10,
                        null=True,
                        verbose_name="Quality Grade",
                    ),
                ),
                (
                    "rainfall_mm",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Rainfall (mm)",
                    ),
                ),
                (
                    "temperature_avg",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Average Temperature (°C)",
                    ),
                ),
                (
                    "input_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Input Cost",
                    ),
                ),
                (
                    "market_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Market Price per kg",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "data_source",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Data Source"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "crop",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="yield_records",
                        to="crop_management.crop",
                    ),
                ),
                (
                    "farm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crop_yields",
                        to="farm.farm",
                    ),
                ),
                (
                    "recorded_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recorded_yields",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "variety",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="yield_records",
                        to="crop_management.cropvariety",
                    ),
                ),
            ],
            options={
                "verbose_name": "Yield Data",
                "verbose_name_plural": "Yield Data",
                "ordering": ["-harvest_year", "-created_at"],
                "unique_together": {
                    ("crop", "variety", "farm", "harvest_year", "harvest_season")
                },
            },
        ),
    ]
